#!/usr/bin/env nextflow
/*
By Avery Davis Bell
Preps for salmon quant and runs salmon quant for multiple samples
*/

/*
#### Set up input parameters & defaults ####
*/
// Inputs: input/output related & general
params.sampleinfo = "" // Path to tab-delimited file containing sample information. Column names (descriptions): SampleID (sample ID as in input filenames, to be used in output filenames); RefDescrip (description of reference genome(s) to use in output file names); Bwt2BasePath (base path - before .#.bt2 - for bowtie2 index files - can just put xxx if not running bowtie2); SalmonIndexDir (path to directory generated by salmon index - can just put xxx if not running salmon); PooledTranscriptLengths (path to file containing emase.pooled.transcripts.info-style transcript length information, e.g. <ref>_<strain>__transcriptlengths.txt for the strain combinations in this sample); fldMean (mean library fragment length per sample, passed to --fldMean in salmon quant), fldSD (standard deviation library fragment length per sample, passed to --fldSD in salmon quant)
params.outputdir = "" // Parent output directory. Will be created if doesn't exist.
params.fastqdir = "" // Directory containing all fastq.gz files to process. One or more per sample.

// Inputs: Tunable parameters for trimming
params.trimmodir = "trimmomatic-0.39" // Path to trimmomatic v0.39 directory containing jar file and adapters directory (which itself contains TruSeq3-SE.fa).
params.trimmoseedmism = 1 // Input to trimmomatic ILLUMINACLIP. How many of 16 bp can mismatch and still be counted as match.
params.trimmoadapclipthresh = 12 // Input to trimmomatic ILLUMINACLIP. How accurate match between adapter sequence and read must be. Each correct base adds 0.6. They recommend 7-15 (12 bases needed for 7, 25 for 15).

// Inputs: parameters for salmon
params.slibtype = "SR" // salmon --libtype option matching the library being aligned here

// Inputs: organizational
params.salmonenv = '.conda/envs/salmon' // path to conda environment where salmon is installed

// Housekeeping:  create output directories
// Alignment & related info
outdir = file(params.outputdir)
outdir.mkdirs()
outtrimdir = file(params.outputdir + "/triminfo")
outtrimdir.mkdirs()
outsalmdir = file(params.outputdir + "/salmonout")
outsalmdir.mkdirs()

/*
#### Channel management ####
*/
//  Channel with all needed sample info as tuple.
formatChannel = Channel.fromPath(params.sampleinfo)
  .splitCsv(header: true, sep: '\t', strip: true)
  .map{row->
    return [row.SampleID, row.RefDescrip, row.SalmonIndexDir, row.fldMean, row.fldSD]
  }
  .set{sampleInfo}

/*
#### Processes ####
*/

process mergeLaneFastqs{
  // Merge files across lanes so that there's one fastq per sample

  input:
  tuple val(mysamp), val(refdescrip), val(salmidx), val(meanfrag), val(sdfrag) from sampleInfo

  output:
  tuple val(mysamp), val(refdescrip), val(salmidx), val(meanfrag), val(sdfrag), path("mergedlanes.fastq") into mergedfastqs

  """
  zcat ${params.fastqdir}/*${mysamp}*.fastq.gz > mergedlanes.fastq
  """
}

process trimmoIlluminaAdapters{
  // Use trimmomatic to trim Illumina adapters from merged fastqs

  // save trimmomatic output summaries
  publishDir outtrimdir, mode: 'copy', pattern: "*_trimmomatic.out"

  input:
  tuple val(mysamp), val(refdescrip), val(salmidx), val(meanfrag), val(sdfrag), path(mergedfastq) from mergedfastqs

  output:
  tuple val(mysamp), val(refdescrip), val(salmidx), val(meanfrag), val(sdfrag), path("trimmed.fastq") into trimmedfastqs
  path("${mysamp}_trimmomatic.out") into trimlogs

  """
  java -Xmx4g -jar ${params.trimmodir}/trimmomatic-0.39.jar \
  SE -threads 4 \
  ${mergedfastq} trimmed.fastq \
  ILLUMINACLIP:${params.trimmodir}/adapters/TruSeq3-SE.fa:${params.trimmoseedmism}:30:${params.trimmoadapclipthresh} \
  2>${mysamp}_trimmomatic.out
  """
}


process salmonquant{
  // quantify RNA-seq data with salmon

  conda params.salmonenv

  // Save quantification outputs
  publishDir outsalmdir, mode: 'copy', overwrite: true

  input:
  tuple val(mysamp), val(refdescrip), val(salmidx), val(meanfrag), val(sdfrag), path(fastq) from trimmedfastqs

  output:
  tuple val(mysamp), val(refdescrip), path("${mysamp}_salmon_${refdescrip}") into salmouts

  """
  salmon quant \
  -i ${salmidx} \
  -l ${params.slibtype} \
  -r ${fastq} \
  -o ${mysamp}_salmon_${refdescrip} \
  --dumpEq \
  --fldMean ${meanfrag} \
  --fldSD ${sdfrag} \
  --rangeFactorizationBins 4 \
  --seqBias \
  --gcBias \
  -p 4
  """
}
